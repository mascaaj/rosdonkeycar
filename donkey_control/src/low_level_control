#!/usr/bin/python

import rospy, time
from i2cpwm_board.msg import Servo, ServoArray
from geometry_msgs.msg import Twist

class ServoConvert():
	"""
	Class for handling the servos for the i2c control board
	"""

	def __init__(self, id=1, center_value=333, range=90, direction=1):
		self.value			= 0.0
		self.center_value	= center_value
		self.id				= id

		self._center		= center_value
		self._range			= range
		self._half_range	= 0.5*range
		self._dir			= direction


		#convert the range in [-1, 1]
		self._sf		= 1.0/self._half_range

	def get_value_out(self, value_in):
		self.value		= value_in
		self.value_out		= int(self._dir*self.value*self._half_range + self._center)

class DonkeyLowLevelControl():
	"""
	Low level control for donkey car in ROS
	"""

	def __init__(self):
		# logging information
		rospy.loginfo("setting up the node")
		#Intialize the rosnode
		rospy.init_node("dkc_llc")
		
		#create an actuation dictionary
		self.actuators = {}
		self.actuators['throttle'] = ServoConvert(id=1)
		# self.actuators['steering'] = ServoConvert(id=2, center_value=312, direction=1) #positive left
		self.actuators['steering'] = ServoConvert(id=2, center_value=312, direction=1) #positive left

		#create the servo array publisher message

		#create the message
		self._servo_msg		= ServoArray()
		for i in range(2):
			self._servo_msg.servos.append(Servo())

		#Create i2c servo cmd publisher
		self.ros_pub_servo_array = rospy.Publisher("/servos_absolute",ServoArray, queue_size=1)
		rospy.loginfo("> publisher correctly initialized")

		# Create cmd vel subscriber
		self.ros_sub_twist = rospy.Subscriber("/cmd_vel",Twist,self.set_actuators_from_cmdvel)
		rospy.loginfo("> subscriber correctly intialized")

		#Time out configuration
		self._last_time_cmd_vel_recd	= time.time()
		self._timeout_s			= 5

	def set_actuators_from_cmdvel(self, message):
		"""
		Get twist message from cmd_vel, convert to throttle input and steering input
		Assumes the input is max 1
		"""

		#Save the time of last recieved message
		self._last_time_cmd_vel_recd 	= time.time()

		#convert the vel into servo input values
		self.actuators['throttle'].get_value_out(message.linear.x)
		self.actuators['steering'].get_value_out(message.angular.z)

		rospy.loginfo("Got a command v = %2.1f s= %2.1f"%(message.linear.x, message.angular.z))

		#publish the message using a function
		self.send_servo_msg()

	def set_actuators_idle(self):
		self.actuators['throttle'].get_value_out(0)
		self.actuators['steering'].get_value_out(0)
		rospy.loginfo("setting the actuators to idle")

		self.send_servo_msg()

	def send_servo_msg(self):
		"""
		Publish the current actuators value to the i2cpwm board
		Servos = array of servos that have id and value
		"""

		for actuator_name,servo_obj in self.actuators.iteritems():
			self._servo_msg.servos[servo_obj.id-1].servo	= servo_obj.id
			self._servo_msg.servos[servo_obj.id-1].value 	= servo_obj.value_out
			rospy.loginfo("Sending to %s command %d"%(actuator_name,servo_obj.value_out))

		self.ros_pub_servo_array.publish(self._servo_msg)

	@property
	def is_controller_connected(self):
		return(time.time() - self._last_time_cmd_vel_recd < self._timeout_s)


	def run(self):
		rate = rospy.Rate(10)

		while not rospy.is_shutdown():
			print(self._last_time_cmd_vel_recd, self.is_controller_connected)

			if not self.is_controller_connected:
				self.set_actuators_idle()

			rate.sleep()


"""
Execute main file
"""

if __name__ == "__main__":
	dk_llc = DonkeyLowLevelControl()
	dk_llc.run()

